<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Object Scanner</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: white;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            padding: 20px 0;
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .scanner-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .camera-feed, .preview {
            flex: 1;
            min-width: 300px;
            background: rgba(0, 0, 0, 0.4);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            position: relative;
        }
        
        .camera-placeholder, #preview-canvas {
            width: 100%;
            height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #111;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            padding: 20px;
        }
        
        button {
            padding: 12px 25px;
            border: none;
            border-radius: 50px;
            background: linear-gradient(to right, #3494E6, #EC6EAD);
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 14px rgba(0, 0, 0, 0.3);
        }
        
        button:active {
            transform: translateY(1px);
        }
        
        #scan-btn {
            background: linear-gradient(to right, #00b09b, #96c93d);
        }
        
        #reset-btn {
            background: linear-gradient(to right, #ff5e62, #ff9966);
        }
        
        .instructions {
            background: rgba(0, 0, 0, 0.4);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            line-height: 1.6;
        }
        
        .instructions h2 {
            margin-bottom: 10px;
        }
        
        .instructions ol {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 10px;
        }
        
        .status {
            text-align: center;
            padding: 10px;
            font-weight: bold;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 5px;
            margin-top: 10px;
        }
        
        .progress-bar {
            height: 10px;
            background: #333;
            border-radius: 5px;
            margin: 10px 0;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background: linear-gradient(to right, #00b09b, #96c93d);
            width: 0%;
            transition: width 0.5s;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            margin-top: 30px;
            opacity: 0.8;
        }
        
        @media (max-width: 768px) {
            .scanner-container {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>3D Object Scanner</h1>
            <p class="subtitle">Scan real-world objects and convert them into 3D models</p>
        </header>
        
        <div class="scanner-container">
            <div class="camera-feed">
                <h2>Camera Feed</h2>
                <div class="camera-placeholder">
                    <p>Camera access required for scanning</p>
                </div>
                <div class="progress-bar">
                    <div class="progress" id="scan-progress"></div>
                </div>
                <div class="status" id="status">Ready to scan</div>
            </div>
            
            <div class="preview">
                <h2>3D Preview</h2>
                <div id="preview-canvas"></div>
            </div>
        </div>
        
        <div class="controls">
            <button id="start-btn">Start Camera</button>
            <button id="scan-btn">Scan Object</button>
            <button id="reset-btn">Reset</button>
        </div>
        
        <div class="instructions">
            <h2>How to Use This Scanner</h2>
            <ol>
                <li>Click "Start Camera" to enable your device's camera (requires permission)</li>
                <li>Place the object you want to scan in the center of the view</li>
                <li>Click "Scan Object" - the scanner will simulate the scanning process</li>
                <li>Wait for the 3D model to be generated on the right side</li>
                <li>Use "Reset" to clear the current scan and start over</li>
            </ol>
            <p><strong>Note:</strong> This is a simulation of a 3D scanning process. A real 3D scanner would require more advanced technology.</p>
        </div>
    </div>
    
    <footer>
        <p>3D Scanner Simulation | Created with Three.js</p>
    </footer>

    <script>
        // Variables for the 3D scene
        let scene, camera, renderer, object;
        let isScanning = false;
        let scanProgress = 0;
        
        // Initialize the 3D preview
        function init3DPreview() {
            // Set up the scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x1a1a2e);
            
            // Set up the camera
            camera = new THREE.PerspectiveCamera(75, 
                document.getElementById('preview-canvas').offsetWidth / 
                document.getElementById('preview-canvas').offsetHeight, 
                0.1, 1000
            );
            camera.position.z = 5;
            
            // Set up the renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(
                document.getElementById('preview-canvas').offsetWidth,
                document.getElementById('preview-canvas').offsetHeight
            );
            document.getElementById('preview-canvas').appendChild(renderer.domElement);
            
            // Add some lights
            const ambientLight = new THREE.AmbientLight(0x404040);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);
            
            // Add a grid helper
            const gridHelper = new THREE.GridHelper(10, 10);
            scene.add(gridHelper);
            
            // Initial render
            animate();
        }
        
        // Animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            if (object) {
                object.rotation.x += 0.005;
                object.rotation.y += 0.01;
            }
            
            renderer.render(scene, camera);
        }
        
        // Generate a 3D model based on a random shape
        function generate3DModel() {
            // Clear any existing object
            if (object) {
                scene.remove(object);
            }
            
            // Randomly select a shape type
            const shapeType = Math.floor(Math.random() * 4);
            
            switch(shapeType) {
                case 0:
                    // Cube
                    const cubeGeometry = new THREE.BoxGeometry(2, 2, 2);
                    const cubeMaterial = new THREE.MeshPhongMaterial({ 
                        color: 0x00a8ff,
                        specular: 0xffffff,
                        shininess: 100,
                        transparent: true,
                        opacity: 0.9
                    });
                    object = new THREE.Mesh(cubeGeometry, cubeMaterial);
                    break;
                    
                case 1:
                    // Sphere
                    const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);
                    const sphereMaterial = new THREE.MeshPhongMaterial({
                        color: 0xe84118,
                        specular: 0xffffff,
                        shininess: 100,
                        wireframe: false
                    });
                    object = new THREE.Mesh(sphereGeometry, sphereMaterial);
                    break;
                    
                case 2:
                    // Cone
                    const coneGeometry = new THREE.ConeGeometry(1, 2, 32);
                    const coneMaterial = new THREE.MeshPhongMaterial({
                        color: 0x4cd137,
                        specular: 0xffffff,
                        shininess: 100
                    });
                    object = new THREE.Mesh(coneGeometry, coneMaterial);
                    break;
                    
                case 3:
                    // Torus
                    const torusGeometry = new THREE.TorusGeometry(1, 0.4, 16, 100);
                    const torusMaterial = new THREE.MeshPhongMaterial({
                        color: 0x9c88ff,
                        specular: 0xffffff,
                        shininess: 100
                    });
                    object = new THREE.Mesh(torusGeometry, torusMaterial);
                    break;
            }
            
            scene.add(object);
        }
        
        // Simulate the scanning process
        function simulateScan() {
            if (isScanning) return;
            
            isScanning = true;
            scanProgress = 0;
            document.getElementById('status').textContent = 'Scanning...';
            
            const progressBar = document.getElementById('scan-progress');
            const scanInterval = setInterval(() => {
                scanProgress += 2;
                progressBar.style.width = scanProgress + '%';
                
                if (scanProgress >= 100) {
                    clearInterval(scanInterval);
                    document.getElementById('status').textContent = 'Scan Complete! Generating 3D model...';
                    
                    // Generate the 3D model after a short delay
                    setTimeout(() => {
                        generate3DModel();
                        document.getElementById('status').textContent = '3D Model Generated!';
                        isScanning = false;
                    }, 1000);
                }
            }, 100);
        }
        
        // Set up event listeners
        document.getElementById('start-btn').addEventListener('click', () => {
            document.querySelector('.camera-placeholder').innerHTML = 
                '<p style="text-align:center;">Camera feed would appear here<br><small>In a real application, this would show your camera feed</small></p>';
            document.getElementById('status').textContent = 'Camera started (simulated)';
        });
        
        document.getElementById('scan-btn').addEventListener('click', simulateScan);
        
        document.getElementById('reset-btn').addEventListener('click', () => {
            if (object) {
                scene.remove(object);
                object = null;
            }
            document.getElementById('scan-progress').style.width = '0%';
            document.getElementById('status').textContent = 'Ready to scan';
        });
        
        // Initialize the 3D preview when the window loads
        window.addEventListener('load', init3DPreview);
        
        // Handle window resize
        window.addEventListener('resize', () => {
            if (camera && renderer) {
                camera.aspect = 
                    document.getElementById('preview-canvas').offsetWidth / 
                    document.getElementById('preview-canvas').offsetHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(
                    document.getElementById('preview-canvas').offsetWidth,
                    document.getElementById('preview-canvas').offsetHeight
                );
            }
        });
    </script>
</body>
</html>
